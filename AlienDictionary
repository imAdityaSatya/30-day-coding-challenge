class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        List<Set<Integer>> aList = new ArrayList<>();
        for(int i=0; i<K; i++) {
            aList.add(new HashSet<>());
        }
        int inDeg[] = new int[K];
        
        for(int i=0; i<N-1; i++) {
            String wrd1 = dict[i];
            String wrd2 = dict[i+1];
            int minLen = Math.min(wrd1.length(), wrd2.length());
            boolean diff = false;
            for(int j=0; j<minLen; j++) {
                if (wrd1.charAt(j) != wrd2.charAt(j)) {
                    int u = wrd1.charAt(j)-'a';
                    int v = wrd2.charAt(j)-'a';
                    if(!aList.get(u).contains(v)) {
                        aList.get(u).add(v);
                        inDeg[v]++;
                    }
                    diff = true;
                    break;
                }
            }
            if(!diff && wrd1.length() > wrd2.length()) {
                return "";  
            }
        }
        
        Queue<Integer> zeroInDegQ = new LinkedList<>();
        for(int i=0; i<K; i++) {
            if(inDeg[i]==0) {
                zeroInDegQ.add(i);
            }
        }
        
        StringBuilder order = new StringBuilder();
        while (!zeroInDegQ.isEmpty()) {
            int u = zeroInDegQ.poll();
            order.append((char)(u + 'a'));
            for(int i : aList.get(u)) {
                inDeg[i]--;
                if (inDeg[i]==0) {
                    zeroInDegQ.add(i);
                }
            }
        }
        if(order.length() < K) {
            return "";  
        }
        return order.toString();
    }

}
